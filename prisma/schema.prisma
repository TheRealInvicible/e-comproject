// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  phone         String?
  role          Role      @default(CUSTOMER)
  address       Address[]
  orders        Order[]
  reviews       Review[]
  wishlist      Wishlist?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  street      String
  city        String
  state       String
  country     String
  postalCode  String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id            String         @id @default(cuid())
  sku           String        @unique
  name          String
  description   String
  price         Decimal
  salePrice     Decimal?
  stockQuantity Int
  images        String[]
  specifications Json?
  brand         String?
  weight        Float?
  dimensions    String?
  status        ProductStatus @default(ACTIVE)
  categories    CategoryProduct[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Category {
  id          String           @id @default(cuid())
  name        String
  description String?
  image       String?
  parentId    String?
  parent      Category?        @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]       @relation("CategoryHierarchy")
  products    CategoryProduct[]
  displayOrder Int             @default(0)
  status      Status          @default(ACTIVE)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model CategoryProduct {
  productId   String
  categoryId  String
  product     Product   @relation(fields: [productId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())

  @@id([productId, categoryId])
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  status          OrderStatus @default(PENDING)
  paymentMethod   String
  paymentStatus   PaymentStatus @default(PENDING)
  shippingMethod  String
  shippingCost    Decimal
  subtotal        Decimal
  discount        Decimal     @default(0)
  total           Decimal
  billingAddress  Json
  shippingAddress Json
  notes           String?
  items           OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal
  subtotal  Decimal
  createdAt DateTime @default(now())
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  addedAt    DateTime @default(now())

  @@unique([wishlistId, productId])
}

model Review {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  MANAGER
  CUSTOMER
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}